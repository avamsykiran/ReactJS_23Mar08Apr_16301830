https://github.com/avamsykiran/ReactJS_23Mar08Apr_16301830.git

Lab
----------------------------------

    VSCode IDE
    Node    Javascript execution environment

            node --version

NodeJS
====================================

    Javascript execution environment,

    Creating a node project
    -----------------------------
        create a directory
        inside that directory 'npm init -y'
    
    npm     node package manager        build tool
    package.json        as the project meta data / config file.

    npm install package-name --save     
    npm install package-name --dev-save
    npm install -g package-name


ReactJS
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    javascript library to develop SPA.

    Dynamic Web Application

    Web Server                                                      Client/Browser
        ServerSide executing Programs           <---REQ (URL) -----
            (servlets or jsp/.aspx,ASP.net)

                        -- RESPONSE (html + css + javascript)-------> Load HTML, Load CSS,
                                                                         Load Javascript
    
    Single Page Application
    
    Web Server                                                      Client/Browser
        (javascript code +singlePage.html + css)   <---REQ1 (URL) -----
 
            -- RESPONSE (singlePage.html + css + javascript)-------> Load HTML, Load CSS,
                                                                         Load Javascript
    
        ServerSide executing Programs             <--REQ2 (URL) ------- 
            (REST api / REST WebServices)       
                                ---- RESPONSE (data.xml/data.json) -->  JS recevie the data         
                                                                        and chagnes apart of the 
                                                                        singlePage.html
                                                                        to show the data.

    compose the source code                             VSCode
    bundle teh code and minify the code.                    npm
    thrid party package dependecnies to be managed          npm
    deploy this code in a server.                           npm
    run it on a browsers                                chrome


    Creating a react Application
    ------------------------------------------

    Method1:
            create a folder
            inside the folder, 'npm init -y' 
            using npm install , the below libraries msut be installed
                react-dom.js
                react-scripts.js
                jasmine.js
                minify.js
                ...additional libraries as needed
            create a index.html
            create a js file to containe the SPA code.
            link the file with index.html

    Method2
            npm install -g create-react-app
            create-react-app app-name

            (or)

            npx create-react-app app-name
            
    SPA Component
    -------------------------------------------------

        a Component is a samll section of the singlePage index.html

        Component  = html + JS

    React Component
    ------------------------------------------------------------
        a component is a user developed html element.    

        <h1>    a open tag
        </h1>   a close tag

        <h1>content</h1>    an html element


        React Component = html + state + props + js behavioural code

            1. Class Components
            2. Function Components
            3. Pure Function Components
            4. High Order Components

    JSX - Javascript extended
    ----------------------------------

        JSX = html + javascript

        <div>
            {javascript code.....}
        </div>

        1. all html elements msut be written in lower case
        2. {javascriptExpression} must return a JSX element
                a JSX element can be a number, date, stribng or another html or react element.
        3. 'class' attriubte is not allowed; className attribute is sued instead.
        4. react component must be initial capaitalized

    
1. Class Components
-----------------------------------

    class Header extend React.Component {

        render(){
            return anHtmlOrReactElement
        }
    }

    ***the render method must return one and only root element
        
    React Component state
    ------------------------------------

        the state in react component is immutable (not modifieable).

        but it is replacable using a react component method setState();

2. Function Components
-------------------------------
        is a javascript function that
        returns an html dom element and
        accepts the 'props' as an argument.

3. Pure Function Components
-----------------------------
        is a functional component that does not trigger changes to other
        components.

4. High Order Components
------------------------------------
        is a function that accepts one component and adds additional features to it
        and returns it as a new component.

Event Bubbling
--------------------
    is a desing where the child component can bubble the event 
    to its parent, and teh parent will respond or handle that event.

React Component LifeCycle
--------------------------------------------------------

        While Component Creation and Insertion Into DOM (Mounting)

                constructor()
                render()
                componentDidMount()

        While Component Updates (re-renders) due to a change in props/state

                shouldComponentUpdate()
                render()
                componentDidUpdate()

        While Component unmounts ..

                componentWillUnmount()

        While Error at the time of rendering...

                componentDidCatch()

        Component Instance Methods

                setState()
                forceUpdate()
                
React Hooks
--------------------------------------------------------

        Hooks are functions that let you “hook into” React state and lifecycle 
        features from function components.

        1. Only call Hooks at the top level. 
        2. Only call Hooks in functional components.


        State Hook                     const [count, setCount] = useState(0);
          
          equi to setState()

        Effect Hook                     useEffect(() => {
                                           //task that shall happen
                                        },[]); 

          equi to componentDidMount, 
          componentDidUpdate 
          and  componentWillUnmount


Integrate with REST api
---------------------------------

        json-server             

                is a rest api generating tool 
                given a json file, but only
                for practise or test purpose.


        axios

                is a http client library.
                using this we can make any http
                request .

                get(url) :Promise
                post(url,reqeustBody) :Promise
                put(url,reqeustBody) :Promise
                delete(url) :Promise
                patch(url,reqeustBody) :Promise

                let p = axios.get('http://localhost:8989/todos');

                p.then(
                  (data) => {...}, //called on sucessful execution
                  (error) => {....}  //called on errorsome execution
                );

Routing
--------------------------------------------------------

        react-router

                        <Redirect to="" />

                        navigating programatically

        react-router-dom

                        BrowserRouter as Router
                        Route
                        Switch
                        Link


                        <Router>
                                <CommponnetThatCommonlyAppera />

                                <Switch>
                                        <Route path="/" exact><Component1 /></Route>
                                        <Route path="/about" component={component2} />
                                        <Route path="/edit/:id" component={component2} />
                                </Switch>                                
                        </Router>

                        <Link to="about">Link Text</Link>

                        props.match.params.id  gives access to the Route PArams.

Redux
---------------------------------------------------------

                is a centralized immutable state management
                library.

                npm install --save redux
                npm install --save react-redux

                STORE

                        is the centralized repository of data.
                        All application state is held by a store.

                        typically, but neccassacrily, we will have
                        one store fro one application.

                REDUCER

                        is a pure function, that processes the data
                        each time a action is dispatched.

                        will receive the older state as input and an action
                        makes changes in line with the given action to the given state
                        and returns the new state.

                ACTION

                        an action typically represents an operation.

                        an action has two main parts
                                type            is the naem of the operation
                                payload         data required to perform the operation

                        let action = {
                                        type:"DELETE",
                                        itemId:5
                                     };

                        let action = {
                                        type:"ADD",
                                        item:{id:5,title:'Pens Box',price:66}
                                     };         

                DISPATCHER                                                                 

                        is the one who carries an action
                        from a react component to a reducer.


        redux
                   
                        let myStore = createStore(reducer);        

        react-redux

                        <Provider store={myStore}>
                                .......
                        </Provider>

                        let myHOC = connect();  //creates a high order component

                        //export default TaskList;
                        export default myHOC(TaskList); 
                                //HOC will add the state as props to TaskList
                                //so that the task list can access the data in the state as props.
                                //also provides a dispatch function in the props
                                //to request an action from the component.


                        connct function accepts 2 optional 
                        funcation "mapStateToProps","mapDispatcherToProps" as an argument


                        let hoc = connect((state)=>{students:[...state.students]});

                        export default hoc(StudentsList);

        Thunk 
        ==============================

                Thunk means a function that returns another function?
                
                npm install --save redux        
                npm install --save react-redux
                npm install --save redux-thunk

                store <---- Reducer  <---action--- Component
                 |
                 |-------------------------------->

                                     <---action------------------------------------
                store <---- Reducer  <---actionSucess--- ApiCall <---thunkAction--- Component
                 |                   <---actionErr---
                 |
                 |------------------------------------------------------------------>



        Saga
        =============================
                npm install --save redux
                npm install --save react-redux
                npm install --save react-saga






